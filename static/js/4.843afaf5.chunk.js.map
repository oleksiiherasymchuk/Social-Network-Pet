{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/AddMessageForm/AddMessageForm.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","dialogs","dialogsItems","active","messages","message","DialogItem","props","path","id","react_default","a","createElement","className","s","dialog","NavLink","to","name","Message","maxLength50","maxLengthCreator","reduxForm","form","onSubmitSuccess","result","dispatch","reset","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","Dialogs","dialogsElements","dialogsPage","map","d","Dialogs_DialogItem_DialogItem","key","messagesElements","m","Dialogs_Message_Message","Dialogs_AddMessageForm_AddMessageForm","values","sendMessage","newMessageBody","compose","connect","state","sendMessageCreator"],"mappings":"6EACAA,EAAAC,QAAA,CAAkBC,QAAA,yBAAAC,aAAA,8BAAAC,OAAA,wBAAAC,SAAA,0BAAAC,QAAA,2HCWHC,EARI,SAACC,GAChB,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEX,QACtCO,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAASC,GAAIT,GAAOD,EAAMW,QCDnBC,EAJC,SAACZ,GACb,OAAOG,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAEC,QAASR,EAAMF,oDCEtCe,EAAcC,YAAiB,IAuBtBC,cAAU,CAAEC,KAAM,0BACLC,gBAtBR,SAACC,EAAQC,GACzBA,EAASC,YAAM,8BAoBJL,CAjBQ,SAACf,GAEpB,OACIG,EAAAC,EAAAC,cAAA,QAAMgB,SAAUrB,EAAMsB,cAClBnB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAOC,UAAWC,IACdC,SAAU,CAACC,IAAUd,GACrBe,YAAY,qBACZjB,KAAK,oBAEbR,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,0BCQDwB,EAzBC,SAAC7B,GAEb,IAAI8B,EAAkB9B,EAAM+B,YAAYrC,QAAQsC,IAAI,SAAAC,GAAC,OAAI9B,EAAAC,EAAAC,cAAC6B,EAAD,CAAYvB,KAAMsB,EAAEtB,KAAMwB,IAAKF,EAAE/B,GAAIA,GAAI+B,EAAE/B,OAChGkC,EAAmBpC,EAAM+B,YAAYlC,SAASmC,IAAI,SAAAK,GAAC,OAAIlC,EAAAC,EAAAC,cAACiC,EAAD,CAASxC,QAASuC,EAAEvC,QAASqC,IAAKE,EAAEnC,OAS/F,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAEb,SACdS,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAEZ,cACbmC,GAEL3B,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAEV,UACdM,EAAAC,EAAAC,cAAA,WAAM+B,GACNjC,EAAAC,EAAAC,cAACkC,EAAD,CAAgBlB,SAbR,SAACmB,GACjBxC,EAAMyC,YAAYD,EAAOE,kFCQlBC,sBACXC,YAdkB,SAACC,GACnB,MAAO,CACHd,YAAac,EAAMd,cAGF,SAACZ,GACtB,MAAO,CACHsB,YAAa,SAACC,GACVvB,EAAS2B,YAAmBJ,QAKzBC,CAGbd","file":"static/js/4.843afaf5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2ARt9\",\"dialogsItems\":\"Dialogs_dialogsItems__3OZie\",\"active\":\"Dialogs_active__7EAVC\",\"messages\":\"Dialogs_messages__2eQPh\",\"message\":\"Dialogs_message__3y34Q\"};","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n\r\n    return <div className={s.dialog + ' ' + s.active}>\r\n        <NavLink to={path}>{props.name}</NavLink>\r\n    </div>\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\nconst Message = (props) => {\r\n    return <div className={s.dialog}>{props.message}</div>\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport { Textarea } from \"../../common/FormsControls/FormsControls\";\r\nimport { maxLengthCreator, required } from \"../../../utils/validators/validators\";\r\nimport { reset } from 'redux-form';\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\nconst afterSubmit = (result, dispatch) => {\r\n    dispatch(reset('dialog-add-message-form'))\r\n}\r\n\r\nconst AddMessageForm = (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                    validate={[required, maxLength50]}\r\n                    placeholder='Enter your message'\r\n                    name=\"newMessageBody\" />\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm({ form: 'dialog-add-message-form',\r\n                            onSubmitSuccess: afterSubmit })(AddMessageForm);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport AddMessageForm from \"./AddMessageForm/AddMessageForm\";\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let dialogsElements = props.dialogsPage.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id} />);\r\n    let messagesElements = props.dialogsPage.messages.map(m => <Message message={m.message} key={m.id} />);\r\n    // let newMessageBody = props.dialogsPage.newMessageBody;\r\n\r\n    let addNewMessage = (values) => {\r\n        props.sendMessage(values.newMessageBody);\r\n    }\r\n\r\n    // if (!props.isAuth) return <Redirect to={\"/login\"} /> ;\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n                <AddMessageForm onSubmit={addNewMessage} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport {sendMessageCreator} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage: (newMessageBody) => {\r\n            dispatch(sendMessageCreator(newMessageBody));\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    // withAuthRedirect\r\n)(Dialogs);"],"sourceRoot":""}